{"version":3,"sources":["serviceWorker.js","Card.js","Cardlist.js","Searchbox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","Cardlist","robots","map","cur","i","key","Searchbox","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","App","searchinputtxtfn","event","setState","searchinputtxt","target","value","state","fetch","then","response","json","users","this","length","filterRobo","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCDSC,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACtB,OAEG,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA2BL,EAA3B,cACnB,6BACC,4BAAKC,GACL,2BAAIC,MCSEI,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACF,6BAEGA,EAAOC,KACN,SAACC,EAAMC,GAEJ,OACG,kBAAC,EAAD,CAAMC,IAAKJ,EAAOG,GAAGV,GAAIA,GAAIO,EAAOG,GAAGV,GAAIC,KAAMM,EAAOG,GAAGT,KAAMC,MAAOK,EAAOG,GAAGR,aCC/EU,EAVG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEhB,OACG,2BAAOV,UAAU,mCACjBW,SAAUD,EACVE,KAAK,SAASC,YAAY,iBCIlBC,EATA,SAACC,GACb,OACC,yBAAKC,MAAO,CAACC,UAAU,OAAOC,OAAO,QAAQC,OAAO,UACnDJ,EAAMK,WCmDIC,E,kDAlDb,aACA,IAAD,8BACE,gBAiBHC,iBAAmB,SAACC,GAGjB,EAAKC,SAAS,CAACC,eAAeF,EAAMG,OAAOC,SAnB3C,EAAKC,MACL,CACIxB,OAAO,GACPqB,eAAe,IALrB,E,gEASmB,IAAD,OAEhBI,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACpB,OAAO6B,S,+BAS/B,IAAD,OACL,GAAGC,KAAKN,MAAMxB,OAAO+B,OAAS,EAC9B,CAEC,IAAMC,EAAaF,KAAKN,MAAMxB,OAAOiC,QAAO,SAAAjC,GACxC,OAAOA,EAAON,KAAKwC,cAAcC,SAAS,EAAKX,MAAMH,eAAea,kBAGxE,OACE,yBAAKtC,UAAU,MACb,6CACA,kBAAC,EAAD,CAAWU,aAAcwB,KAAKZ,mBAC/B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUlB,OAAQgC,MAMnB,OAAQ,gD,GA7CGI,aCElBC,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SN0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4d0c8130.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nconst Card = ({id, name ,email}) => {\r\n   return (\r\n    \r\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src ={`https://robohash.org/${id}?100x100`}/>\r\n        <div>\r\n         <h2>{name}</h2>\r\n         <p>{email}</p>\r\n         </div> \r\n      </div>\r\n   );\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n    return (\r\n  <div>\r\n   {\r\n     robots.map\r\n     ((cur , i) => \r\n     {\r\n         return (\r\n            <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n         )\r\n     })\r\n    }\r\n  </div>\r\n    )\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n \r\n    return (\r\n       <input className='pa3 ba b--green bg-lightest-blue' \r\n       onChange={searchChange}\r\n       type='search' placeholder='Search here' />\r\n    )\r\n\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n   return (\r\n    <div style={{overflowY:'auto',border:'150px',height:'500px'}}>\r\n    {props.children}\r\n    </div>\r\n   )\r\n\r\n}\r\n\r\nexport default Scroll;","import React,{ Component }  from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport Searchbox from './Searchbox';\r\nimport Scroll from './Scroll';\r\n\r\nclass App extends Component{\r\n  constructor()\r\n {\r\n   super()\r\n   this.state=\r\n   {\r\n       robots:[],\r\n       searchinputtxt:''\r\n   }\r\n }\r\n\r\ncomponentDidMount(){\r\n    \r\n   fetch('https://jsonplaceholder.typicode.com/users')\r\n   .then(response => {  \r\n       return response.json()\r\n   })\r\n   .then(users => this.setState({robots:users}))\r\n}\r\n\r\nsearchinputtxtfn = (event) =>\r\n{\r\n\r\n   this.setState({searchinputtxt:event.target.value}) \r\n} \r\n\r\nrender(){\r\n   if(this.state.robots.length > 0)\r\n   {\r\n\r\n    const filterRobo = this.state.robots.filter(robots => {\r\n        return robots.name.toLowerCase().includes(this.state.searchinputtxt.toLowerCase())\r\n    }) \r\n  \r\n    return (\r\n      <div className='tc'>  \r\n        <h1>Robo Friends </h1>\r\n        <Searchbox searchChange={this.searchinputtxtfn }/>\r\n       <Scroll>\r\n        <Cardlist robots={filterRobo}/>\r\n       </Scroll>\r\n      </div>\r\n    )\r\n   }else\r\n   { \r\n       return (<h1>Loading.... </h1>)\r\n   } \r\n \r\n\r\n}}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Tachyons from 'tachyons';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}